version: '3.8'

services:
  # PostgreSQL 메인 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: secondhand-postgres
    environment:
      POSTGRES_DB: secondhand_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - secondhand-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d secondhand_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL 읽기 전용 복제본
  postgres-replica:
    image: postgres:15-alpine
    container_name: secondhand-postgres-replica
    environment:
      POSTGRES_DB: secondhand_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_MASTER_SERVICE: postgres
    ports:
      - "5434:5432"
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
    networks:
      - secondhand-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # MongoDB 문서 데이터베이스
  mongodb:
    image: mongo:6-jammy
    container_name: secondhand-mongodb
    environment:
      MONGO_INITDB_DATABASE: secondhand_db
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ../scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    networks:
      - secondhand-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis 캐시 및 세션 스토어
  redis:
    image: redis:7-alpine
    container_name: secondhand-redis
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - secondhand-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "password", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ 메시지 큐
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: secondhand-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    ports:
      - "5674:5672"
      - "15674:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    networks:
      - secondhand-network
    restart: unless-stopped
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  # Elasticsearch 검색 엔진
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: secondhand-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - secondhand-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx 로드밸런서
  nginx:
    image: nginx:alpine
    container_name: secondhand-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ../ssl:/etc/nginx/ssl
    networks:
      - secondhand-network
    depends_on:
      - app
    restart: unless-stopped

  # NestJS 애플리케이션 (프로덕션)
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: secondhand-app
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_REPLICA_HOST: postgres-replica
      MONGO_URI: mongodb://root:password@mongodb:27017/secondhand_products?authSource=admin
      REDIS_HOST: redis
      RABBITMQ_URL: amqp://rabbitmq:password@rabbitmq:5672
      ELASTICSEARCH_HOST: elasticsearch
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - secondhand-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  postgres_replica_data:
  mongodb_data:
  redis_data:
  rabbitmq_data:
  elasticsearch_data:

networks:
  secondhand-network:
    driver: bridge