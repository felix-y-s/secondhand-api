// Prisma 스키마 파일
// 문서: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 사용자 역할 정의
enum UserRole {
  BUYER       // 구매자
  SELLER      // 판매자
  ADMIN       // 관리자
}

// 사용자 상태
enum UserStatus {
  ACTIVE      // 활성
  INACTIVE    // 비활성
  SUSPENDED   // 정지
  WITHDRAWN   // 탈퇴
}

// 상품 상태
enum ProductStatus {
  ON_SALE     // 판매중
  RESERVED    // 예약중
  SOLD_OUT    // 거래완료
  DELETED     // 삭제됨
}

// 주문 상태
enum OrderStatus {
  PENDING     // 주문 대기
  PAID        // 결제 완료
  SHIPPING    // 배송중
  DELIVERED   // 배송 완료
  CANCELLED   // 취소됨
  REFUNDED    // 환불됨
}

// 결제 상태
enum PaymentStatus {
  PENDING     // 결제 대기
  COMPLETED   // 결제 완료
  FAILED      // 결제 실패
  CANCELLED   // 결제 취소
  REFUNDED    // 환불 완료
}

// 사용자 테이블
model User {
  id              String        @id @default(uuid())
  email           String        @unique
  password        String
  name            String
  phoneNumber     String?       @map("phone_number")
  role            UserRole      @default(BUYER)
  status          UserStatus    @default(ACTIVE)
  trustScore      Float         @default(0) @map("trust_score") // 신뢰도 점수
  profileImageUrl String?       @map("profile_image_url")
  lastLoginAt     DateTime?     @map("last_login_at")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // 관계
  products        Product[]     // 판매한 상품들
  orders          Order[]       // 주문 내역
  payments        Payment[]     // 결제 내역
  reviews         Review[]      // 작성한 리뷰
  receivedReviews Review[]      @relation("ReceivedReviews") // 받은 리뷰

  @@map("users")
  @@index([email])
  @@index([phoneNumber])
}

// 카테고리 테이블 (계층형 구조)
model Category {
  id          String      @id @default(uuid())
  name        String
  slug        String      @unique
  description String?
  parentId    String?     @map("parent_id")
  level       Int         @default(1) // 카테고리 깊이 (1, 2, 3)
  sortOrder   Int         @default(0) @map("sort_order")
  isActive    Boolean     @default(true) @map("is_active")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // 관계 (자기 참조)
  parent      Category?   @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[]  @relation("CategoryHierarchy")
  products    Product[]

  @@map("categories")
  @@index([parentId])
  @@index([slug])
}

// 상품 테이블
model Product {
  id            String        @id @default(uuid())
  title         String
  description   String
  price         Decimal       @db.Decimal(10, 2)
  categoryId    String        @map("category_id")
  sellerId      String        @map("seller_id")
  status        ProductStatus @default(ON_SALE)
  stock         Int           @default(1)
  viewCount     Int           @default(0) @map("view_count")
  location      String?       // 거래 희망 지역
  latitude      Float?        // 위도
  longitude     Float?        // 경도
  images        String[]      // 이미지 URL 배열
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  // 관계
  category      Category      @relation(fields: [categoryId], references: [id])
  seller        User          @relation(fields: [sellerId], references: [id])
  orderItems    OrderItem[]
  reviews       Review[]

  @@map("products")
  @@index([categoryId])
  @@index([sellerId])
  @@index([status])
}

// 주문 테이블
model Order {
  id              String      @id @default(uuid())
  orderNumber     String      @unique @map("order_number") // 주문 번호
  userId          String      @map("user_id")
  totalAmount     Decimal     @map("total_amount") @db.Decimal(10, 2)
  shippingFee     Decimal     @default(0) @map("shipping_fee") @db.Decimal(10, 2)
  status          OrderStatus @default(PENDING)
  shippingAddress String?     @map("shipping_address")
  recipientName   String?     @map("recipient_name")
  recipientPhone  String?     @map("recipient_phone")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  // 관계
  user            User        @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
  payments        Payment[]
  shipment        Shipment?

  @@map("orders")
  @@index([userId])
  @@index([orderNumber])
  @@index([status])
}

// 주문 상품 테이블
model OrderItem {
  id        String   @id @default(uuid())
  orderId   String   @map("order_id")
  productId String   @map("product_id")
  quantity  Int      @default(1)
  price     Decimal  @db.Decimal(10, 2) // 구매 당시 가격
  createdAt DateTime @default(now()) @map("created_at")

  // 관계
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
  @@index([orderId])
  @@index([productId])
}

// 결제 테이블
model Payment {
  id              String        @id @default(uuid())
  orderId         String        @map("order_id")
  userId          String        @map("user_id")
  amount          Decimal       @db.Decimal(10, 2)
  status          PaymentStatus @default(PENDING)
  paymentMethod   String        @map("payment_method") // 결제 수단 (신용카드, 계좌이체 등)
  transactionId   String?       @unique @map("transaction_id") // PG사 거래 ID
  paidAt          DateTime?     @map("paid_at")
  cancelledAt     DateTime?     @map("cancelled_at")
  refundedAt      DateTime?     @map("refunded_at")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // 관계
  order           Order         @relation(fields: [orderId], references: [id])
  user            User          @relation(fields: [userId], references: [id])

  @@map("payments")
  @@index([orderId])
  @@index([userId])
  @@index([transactionId])
}

// 배송 테이블
model Shipment {
  id              String    @id @default(uuid())
  orderId         String    @unique @map("order_id")
  courierCompany  String    @map("courier_company") // 택배사
  trackingNumber  String?   @map("tracking_number") // 송장번호
  shippedAt       DateTime? @map("shipped_at")
  deliveredAt     DateTime? @map("delivered_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // 관계
  order           Order     @relation(fields: [orderId], references: [id])

  @@map("shipments")
  @@index([orderId])
  @@index([trackingNumber])
}

// 리뷰 테이블
model Review {
  id         String   @id @default(uuid())
  productId  String   @map("product_id")
  authorId   String   @map("author_id")
  targetId   String   @map("target_id") // 리뷰 대상 사용자 (판매자)
  rating     Int      // 평점 (1-5)
  content    String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // 관계
  product    Product  @relation(fields: [productId], references: [id])
  author     User     @relation(fields: [authorId], references: [id])
  target     User     @relation("ReceivedReviews", fields: [targetId], references: [id])

  @@map("reviews")
  @@index([productId])
  @@index([authorId])
  @@index([targetId])
}
